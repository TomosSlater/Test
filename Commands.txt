python -i (starts REPL)
exit() (exits REPL)

STRINGS
======================================================

.lower() / .upper() (to lower/upper case)
string[0] / string[1] / string [-1] (gets characters in string, first, second, last, respectively)
string[2:6] (string slicing - gets slice from 3 to 6)
len(string) (gets length of string)
https://docs.python.org/3/library/stdtypes.html#string-methods for more operators
str(x) converts x to string

======================================================


BOOLEANS
======================================================

use capitalised: True / False
== (equals)
!= (not equals)
< (less than)
<= (less than, or equal to)
not x (true when x is false)
x and y (true when x and y are true)
x or y (true when x or y are true)
https://docs.python.org/3/reference/expressions.html#operator-precedence for operator precedence

======================================================


LISTS
======================================================

list_variable = [list_item_1, list_item_2, etc]
lists can have different variable types (['string', number, True])
same indexing as strings ([0] is first, [1] is second, [-1] is the last)
can split a list by using list[2:6]
skipping a parameter means go from start (:x) or to end (x:)
remove item from index (or sublist): del my_list[1] / del my_list[1:3]
remove item by name: remove('list_item_1) **Note this only remove the first instance
add item to end of list: my_list.append(4)
insert item into list at specific index: my_list.insert(index, list_item)
can concatenate lists, e.g: list_1 + list_2
can get length of a list with len(my_list)

======================================================


DICTIONARIES
======================================================

Key:Value pairs
dictionary_variable = {'key': 'value', 'key': 'value'}
dictionaries can be empty
look up value by using the key, e.g. my_dictionary[key]
add a value: my_dictionary[key] = value
** if you add a value to a key that already exists, it will overwrite it with the new value
remove an item: del my_dictionary[key] (will throw an error if key is not found)
length of dict: len(my_dictionary)

SETS are like dictionaries but without values,
they are essentially lists, but with all unique values
they are useful for fast lookup, compared to lists

======================================================


FLOW CONTROL
======================================================

if STATEMENT:
    code block
elif STATEMENT2:   
    code block 2
else:
    code block 3

(note, no brackets here, just indentation!)

while STATEMENT:
    code block

in while loops, we can use:

break (to exit out of the loop after the current line)
continue (to go back to the start of the loop, and continue running it if the condition is true)


FOR LOOP:
for x in iterable:
    code block

in for loops, break will exit the loop, and continue will move onto the next iteration

we can also use: 
for x in range(0, 5):
    print (x )

which would print 0 1 2 3 4


TRY EXCEPT FINALLY

list a try-catch, but in this format:

try:
    some code that might cause an error
except: (or except TypeError: (to only run if a specific error comes up))
    code that will run if the try block raises an error
finally:
    always executes after the try/except blocks

======================================================


FUNCTIONS
======================================================

def function_name(parameters):
    function code

can provide default values, e.g:

def function(mandatory_param, optional_param = 'param_default_value')
    function code

NOTE: A mandatory parameter can't follow an optional one, it's invalid syntax

can pass in function paraeters by name, e.g.

function(parameter_1 = x, parameter_2 = y)

this will let you send parameters in, in whatever order you want!

can return from a function, e.g:

def function_name():
    function_code
    return x

======================================================